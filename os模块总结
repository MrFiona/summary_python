os.sep可以取代操作系统特定的路径分隔符。windows下为 “\\”,Linux下为"/"
os.linesep字符串给出当前平台使用的行终止符。例如，Windows使用'\r\n'，Linux使用'\n'而Mac使用'\r'。
os.pathsep 输出用于分割文件路径的字符串，系统使用此字符来分割搜索路径（像PATH），例如POSIX上':',Windows上的';'

os.getcwd() 获取当前工作目录，即当前python脚本工作的目录路径 
os.chdir("dirname") 改变当前脚本工作目录；相当于shell下cd
os.curdir 返回当前目录: ('.')
os.pardir 获取当前目录的父目录字符串名：('..')
os.mkdir('dirname') 生成单级目录；相当于shell中mkdir dirname
os.makedirs('dirname1/dirname2') 可生成多层递归目录
os.remove(file) 删除一个文件
os.removedirs('dirname1') 若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推
os.rmdir('dirname') 删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname
os.listdir('dirname') 列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印
os.rename("oldname","newname") 重命名文件/目录,如果newname存在则替换出现错误
os.replace(src,dest) 重命名文件/目录，如果dest表示的是文件，存在则覆盖原来的文件，不报错；若是目录，存在则会报错
os.stat('path/filename') 获取文件/目录信息
os.utime(path,times) 修改时间属性 times是个元组,(atime,mtime),这两个时间数可以通过os.stat获取
os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])
1.top表示需要遍历的目录树的路径
2.topdown的默认值是”True”,表示首先返回目录树下的文件，然后在遍历目录树的子目录.Topdown的值为”False”时，
则表示先遍历目录树的子目录，返回子目录下的文件，最后返回根目录下的文件
3.onerror的默认值是”None”,表示忽略文件遍历时产生的错误.如果不为空，则提供一个自定义函数提示错误信息后继续遍历或抛出异常中止遍历
该函数返回一个元组，该元组有3个元素，这3个元素分别表示每次遍历的路径名，目录列表和文件列表
os.walk()举例：
>>> import os
>>> for root, dirs, files in os.walk("wd/chat", topdown=False):
... for name in files:
...  print(os.path.join(root, name)) #打印文件绝对路径
... for name in dirs:
...  print(os.path.join(root, name)) #打印目录绝对路径

os.name字符串指示你正在使用的平台。比如对于Windows，它是'nt'，而对于Linux/Unix用户，它是'posix'。
os.getenv()获取一个环境变量，如果没有返回none
os.putenv(key, value)设置一个环境变量值
os.system(command)函数用来运行shell命令。
os.popen("bash command") 运行shell命令，生成对象，可赋给变量，再用read读取


os.path常用模块详解

os.path.split(p)函数返回一个路径的目录名和文件名。
os.path.splitext():分离文件名与扩展名

os.path.isfile()和os.path.isdir()函数分别检验给出的路径是一个文件还是目录。
os.path.isabs(path):判断一个路径是否是绝对路径
os.path.exists()函数用来检验给出的路径是否真地存在

os.path.getsize(name):获得文件大小，如果name是目录返回0L
os.path.getatime(path) 返回path所指向的文件或者目录的最后存取时间
os.path.getmtime(path) 返回path所指向的文件或者目录的最后修改时间

os.path.normpath(path):规范path字符串形式
>>> os.path.normpath('c://windows\\System32\\../Temp/')
'c:\\windows\\Temp'
os.path.join(path,name):连接目录与文件名或目录

os.path.basename(path):返回文件名
os.path.dirname(path) 返回path的目录。其实就是os.path.split(path)的第一个元素
os.path.abspath(path) 返回path规范化的绝对路径
>>> import os.path
>>> os.path.abspath('c.py')
'/root/py/c.py'
>>> os.path.abspath('../py/c.py')
'/root/py/c.py'
