def  定义函数

def 函数名（参数列表):
    语句块


给函数添加文档字符串做注释：
[python] view plain copy print?
>>> def add(*argc):  
    'cacluate the sum'  
    sum = 0  
    for x in argc:  
        sum += x  
    return sum  
  
>>> add(1,3,5)  
9  
>>> add.__doc__  
'cacluate the sum'  
返回值：没有指定的时候，函数会返回None

Python的参数不用指定类型，因为类型可以很自由地转换
Python的函数没有所谓的引用，所有参数都是传副本，你不能通过函数来修改原来的变量

如果你确实想要修改变量，你只能靠 return 来返回新值，并将新值赋给你的变量
[python] view plain copy print?
>>> x = 2  
>>> def add(x):  
    x += 1  
    return x  
  
>>> x = add(x)  
>>> x  
3  

Python的函数参数分为位置参数和关键字参数
[python] view plain copy print?
>>> def show(name,age):  
    print("name is %s, age is %d" % (name,age))  
  
      
>>> show("Jonh",16) #位置参数，和严格对应参数位置  
name is Jonh, age is 16  
>>> show(age = 15,name = "Alice") #关键字参数，即使位置打乱了也没关系  
name is Alice, age is 15  


你也可以设置默认值，有默认值的要放后面
[python] view plain copy print?
>>> def show(name,age = 18):  
    print("name is %s, age is %d" % (name,age))  
  
      
>>> show("Bob")  
name is Bob, age is 18  

你也可以提供不定参数，其实前面我们已经看过了，就是在参数名字前加上 * 号就可以了
[python] view plain copy print?
>>> def add(*argc):  
    'cacluate the sum'  
    sum = 0  
    for x in argc:  
        sum += x  
    return sum  


如果是不定的关键字参数呢?使用**，但函数会收集这些参数并作为字典处理
[python] view plain copy print?
>>> def show(**ar):  
    print(ar)  
  
      
>>> show(x=1, y=2, z=3)  
{'x': 1, 'y': 2, 'z': 3}  


改变全局变量的方法--你告诉函数这是一个全局变量
[python] view plain copy print?
>>> x = 1  
>>> def change():  
    global x  
    x += 1  
  
      
>>> change()  
>>> x  
2  

Python 也是可以递归的哦
[python] view plain copy print?
>>> def fib(n):  
    if n == 1:  
        return 1  
    elif n == 2:  
        return 2  
    else:  
        return fib(n-1) + fib(n-2)  
  
      
>>> fib(5)  
8  


1、lambda 匿名函数
lambda 语句中，冒号前是参数，可以有多个，用逗号隔开，冒号右边的返回值。
[python] view plain copy print?
>>> m = lambda x,y: x*y  
>>> m(2,3)  
6  

functools：map filter reduce

2、map
map函数会根据提供的函数对指定序列做映射。
map函数的定义：
map(function, sequence[, sequence, ...]) -> list
通过定义可以看到，这个函数的第一个参数是一个函数，剩下的参数是一个或多个序列，返回值是一个集合。
function可以理解为是一个一对一或多对一函数，map的作用是以参数序列中的每一个元素调用function函数，返回包含每次function函数返回值的list。
>>> map(lambda x:x+2, [1, 2, 3])
[3, 4, 5]
>>> map(lambda x:x+2, (1, 2, 3))
[3, 4, 5]
>>> map(lambda x:x+2, [1, 2], [1, 2])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: <lambda>() takes exactly 1 argument (2 given)
复制代码
最后这个例子说lambda函数需要传2个参数（因为后面的列表是2个）

例2

>>> map(lambda x,y:x+y, [1, 2], [1, 2])
[2, 4]
>>> map(lambda x,y:x+y, [1, 2], (1,2))
[2, 4]
例3

复制代码
>>> a
[{'type': 2, 'ID': 1}, {'type': 4, 'ID': 2}, {'ID': 3}]
>>> map(lambda x:x['ID'], a)
[1, 2, 3]
>>> map(lambda x:x['type'], a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <lambda>
KeyError: 'type'
复制代码
例子说明，如果其中的一个键不存在({'ID':3}不存在type)会报错。

例4

上面例子中只给了lambda，还可以用普通的函数

复制代码
>>> def func2(x, y):
...     return x+y
... 
>>> map(func2, [1, 2, 3], [3, 2, 1])
[4, 4, 4]
>>> 
>>> def func1(x):
...     return x**2
... 
>>> map(func1, [1, 2, 3])
[1, 4, 9]
复制代码
例5

如果没有给定，就类似于zip函数了

复制代码
>>> map(None, [1, 2, 3, 4], [1, 2, 3, 4])
[(1, 1), (2, 2), (3, 3), (4, 4)]
>>> map(None, [1, 2, 3, 4], [1, 2, 3, 4,5])
[(1, 1), (2, 2), (3, 3), (4, 4), (None, 5)]
>>> map(None, [1, 2, 3, 4], [1, 2, 3, 4,5], [1, 2, 3])
[(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, None), (None, 5, None)]
复制代码
不过与zip不同

>>> zip([1, 2, 3, 4], [1, 2, 3, 4,5], [1, 2, 3])
[(1, 1, 1), (2, 2, 2), (3, 3, 3)]

3、filter
filter将 function 依次作用于 iterable 的每个元素，如果返回值为true, 保留元素，否则从iterable里面删除
filter函数会对指定序列执行过滤操作。
filter函数的定义：
filter(function or None, sequence) -> list, tuple, or string
function是一个谓词函数，接受一个参数，返回布尔值True或False。
filter函数会对序列参数sequence中的每个元素调用function函数，最后返回的结果包含调用结果为True的元素。
返回值的类型和参数sequence的类型相同
>>> filter(lambda x:x%2==1, [1, 2, 3])
[1, 3]
>>> filter(lambda x:x%2==1, (1, 2, 3))
(1, 3)

4、reduce函数
reduce函数，reduce函数会对参数序列中元素进行累积。
reduce函数的定义：
reduce(function, sequence[, initial]) -> value
function参数是一个有两个参数的函数，reduce依次从sequence中取一个元素，和上一次调用function的结果做参数再次调用function。
第一次调用function时，如果提供initial参数，会以sequence中的第一个元素和initial作为参数调用function，
否则会以序列sequence中的前两个元素做参数调用function。
reduce(lambda x, y: x + y, [2, 3, 4, 5, 6], 1)
结果为21(  (((((1+2)+3)+4)+5)+6)  )
reduce(lambda x, y: x + y, [2, 3, 4, 5, 6])
结果为20

>>> reduce(lambda x, y:x+y, [1,2,3,4])
10
>>> reduce(lambda x, y:x+y, [1,2,3,4], 10)
20
如果没有initial参数，这么算：（（（1+2）+3）+4）
如果有initial参数，这么算： （（（（10+1）+2）+3）+4）

注意function函数不能为None，function必须是有2个参数的函数

5、zip
它是Python的内建函数，(与序列有关的内建函数有：sorted()、reversed()、enumerate()、zip()),
其中sorted()和zip()返回一个序列(列表)对象，reversed()、enumerate()返回一个迭代器(类似序列)
定义：zip([seql, ...])接受一系列可迭代对象作为参数，将对象中对应的元素打包成一个个tuple（元组），然后返回由这些tuples组成的list（列表）。
若传入参数的长度不等，则返回list的长度和参数中长度最短的对象相同。

* 二维矩阵变换（矩阵的行列互换）
比如我们有一个由列表描述的二维矩阵
a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
通过python列表推导的方法，我们也能轻易完成这个任务
print [ [row[col] for row in a] for col in range(len(a[0]))]
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
另外一种让人困惑的方法就是利用zip函数：
>>> a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> zip(*a)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
>>> map(list,zip(*a))
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
 
zip函数接受任意多个序列作为参数，将所有序列按相同的索引组合成一个元素是各个序列合并成的tuple的新序列，新的序列的长度以参数中最短的序列为准。另外(*)操作符与zip函数配合可以实现与zip相反的功能，即将合并的序列拆成多个tuple。
①tuple的新序列
>>>>x=[1,2,3],y=['a','b','c']
>>>zip(x,y)
[(1,'a'),(2,'b'),(3,'c')]

②新的序列的长度以参数中最短的序列为准.
>>>>x=[1,2],y=['a','b','c']
>>>zip(x,y)
[(1,'a'),(2,'b')]

③(*)操作符与zip函数配合可以实现与zip相反的功能,即将合并的序列拆成多个tuple。
>>>>x=[1,2,3],y=['a','b','c']
>>>>zip(*zip(x,y))
[(1,2,3),('a','b','c')]

其他高级应用：
1.zip打包解包列表和倍数
>>> a = [1, 2, 3]
>>> b = ['a', 'b', 'c']
>>> z = zip(a, b)
>>> z
[(1, 'a'), (2, 'b'), (3, 'c')]
>>> zip(*z)
[(1, 2, 3), ('a', 'b', 'c')]

2. 使用zip合并相邻的列表项
>>> a = [1, 2, 3, 4, 5, 6]
>>> zip(*([iter(a)] * 2))
[(1, 2), (3, 4), (5, 6)]

>>> group_adjacent = lambda a, k: zip(*([iter(a)] * k))
>>> group_adjacent(a, 3)
[(1, 2, 3), (4, 5, 6)]
>>> group_adjacent(a, 2)
[(1, 2), (3, 4), (5, 6)]
>>> group_adjacent(a, 1)
[(1,), (2,), (3,), (4,), (5,), (6,)]

>>> zip(a[::2], a[1::2])
[(1, 2), (3, 4), (5, 6)]

>>> zip(a[::3], a[1::3], a[2::3])
[(1, 2, 3), (4, 5, 6)]

>>> group_adjacent = lambda a, k: zip(*(a[i::k] for i in range(k)))
>>> group_adjacent(a, 3)
[(1, 2, 3), (4, 5, 6)]
>>> group_adjacent(a, 2)
[(1, 2), (3, 4), (5, 6)]
>>> group_adjacent(a, 1)
[(1,), (2,), (3,), (4,), (5,), (6,)]

3.使用zip和iterators生成滑动窗口 (n -grams) 
>>> from itertools import islice
>>> def n_grams(a, n):
...     z = (islice(a, i, None) for i in range(n))
...     return zip(*z)
...
>>> a = [1, 2, 3, 4, 5, 6]
>>> n_grams(a, 3)
[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]
>>> n_grams(a, 2)
[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]
>>> n_grams(a, 4)
[(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]

4.使用zip反转字典
>>> m = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
>>> m.items()
[('a', 1), ('c', 3), ('b', 2), ('d', 4)]
>>> zip(m.values(), m.keys())
[(1, 'a'), (3, 'c'), (2, 'b'), (4, 'd')]
>>> mi = dict(zip(m.values(), m.keys()))
>>> mi
{1: 'a', 2: 'b', 3: 'c', 4: 'd'}

6、enumerate
enumerate(iterable[, start]) -> iterator for index, value of iterable
利用enumerate()函数，可以在每次循环中同时得到下标和元素
S = 'abcdefghijk'
for (index,char) in enumerate(S):
    print index
    print char
实际上，enumerate()在每次循环中，返回的是一个包含两个元素的定值表(tuple)，两个元素分别赋予index和char


exec() 可以执行字符串的语句，也就是说，你可以提交一个字符串，然后用exec来执行它
[python] view plain copy print?
>>> exec ('print("HelloWorld")')  
HelloWorld  
exec 很强大，但是明显会带来一些安全漏洞还有一些命名空间的冲突
如果你用于与用户交互...噢，你确定你的用户会提交什么代码吗？
[python] view plain copy print?
>>> from math import sqrt  
>>> exec ('sqrt = 1')  
>>> sqrt(4) #这还能用吗？  
Traceback (most recent call last):  
  File "<pyshell#64>", line 1, in <module>  
    sqrt(4) #这还能用吗？  
TypeError: 'int' object is not callable  
>>> s = 'HeloWorld'  
>>> x = input("请输入命令：")  
请输入命令：del s  
>>> exec (x)  
>>> print(s)  
Traceback (most recent call last):  
  File "<pyshell#68>", line 1, in <module>  
    print(s)  
NameError: name 's' is not defined  

exec 是将字符串作为语句执行，而eval 就是将字符串作为表达式计算的
[python] view plain copy print?
>>> eval ('1+2')  
3  
>>> x = 12  
>>> eval ('x*x + 1')  
145  

chr(n) 当传入序号时，返回n所代表的包含一个字符的字符串(0<=n<=256)
[python] view plain copy print?
>>> chr(67)  
'C'  

enumerate(seq)  产生用于迭代的（索引，值）对
[python] view plain copy print?
>>> L = ['a','c','b']  
>>> d = enumerate(L)  
>>> d  
<enumerate object at 0x024C54B8>  
>>> for k,v in d:  
    print(k,v)  
  
      
0 a  
1 c  
2 b  

